---
title: "Maps for translocation paper"
format: html
editor: visual
---

## Load packages

```{r}
library(sf)
library(tmap)
library(stars)
library(grid)
library(tidyverse)
library(RPostgreSQL)
```

## Map of sample sites for exome capture analysis

### Import map layers

```{r import-map-data1}
# Read file, if lacking database access
exome_points <- read_csv(here::here("data", "maps", "exome_points.csv"))
exome_points <- st_as_sf(exome_points, coords = c("utme_noise", "utmn_noise"), crs = st_crs(26911))

nps_boundaries <- st_read(here::here(
  "data", "maps", "nps-boundaries", "yose_kica_sequ_boundaries.shp"))
st_crs(nps_boundaries) # determine coordinate reference system (CRS)
nps_boundaries <- st_transform(nps_boundaries, 26911) # transform to NAD83 UTM11

# California Color Hillshade (90m) from koordinates.com
hillshade_90m <- read_stars(here::here(
  "data", "maps", "hillshade-90m", "california-color-hillshade-90m.tif"))
st_crs(hillshade_90m)

hillshade_300m <- read_stars(here::here(
  "data", "maps", "hillshade-300m", "california-color-hillshade-300m.tif"))
```

### Check & fix shapefile polygons

```{r}
st_is_valid(nps_boundaries) # all 3 are invalid

nps_boundaries <- st_make_valid(nps_boundaries$geometry)

st_is_valid(nps_boundaries) # fix polygons
```

### Crop raster with bounding box

```{r}
bbox <- st_bbox(c(xmin = 238000, ymax = 4235000, xmax = 403000, ymin = 4011000), 
                crs = st_crs(nps_boundaries)) %>%  
  st_as_sfc()
hillshade_crop <- st_crop(hillshade_90m, bbox)
hillshade_crop <- st_transform(hillshade_crop, 26911)
```

### Create study area map

```{r}
exome_points_map <- tm_shape(hillshade_crop) + 
  tm_rgb(r = 1, g = 2, b = 3) +
  tm_shape(nps_boundaries) + 
  tm_borders(col = "black") +
  tm_shape(exome_points) + 
  tm_symbols(size = 0.7, # increase point size, use darker blue
             col = "bd_status", 
             palette = c("#FFEC8B", "#00B2EE"), # tmap only recognizes basic color names (e.g., "blue" but not "lightblue") - use HEX instead
             title.col = "Bd status") +
  tm_layout(legend.position = c("right", "top")) +
  tm_compass(type = "4star",
             position = c("left", "bottom"),
             size = 2) +
  tm_scale_bar(breaks = c(0, 25, 50), 
               text.size = 0.7, 
               position = c("left", "bottom"))

exome_points_map
```

### Create inset map of California

```{r}
inset_map <- tm_shape(hillshade_300m) +
  tm_rgb(r = 1, g = 2, b = 3) +
  tm_shape(bbox) + 
  tm_borders(col = "black")

inset_map
```

### Study area map with inset map

```{r}
exome_points_map
print(inset_map, vp = viewport(0.35, 0.37, width = 0.2, height = 0.2))
```

### Save map

```{r}
tmap_save(exome_points_map, 
          here::here("doc", "manuscript", "figures",  "map_exome_points.png"),
          insets_tm = inset_map,
          insets_vp = viewport(0.14, 0.24, width = 0.2, height = 0.2))
```

### To Do

-   Exported California hillshade tif has no whitespace around edges, has black border. How to remove border and add whitespace?

## Map of Yosemite translocation & donor sites

### Import map layers

```{r import-map-data2}
translocation_points <- read_csv(here::here("data", "maps", "translocation_points.csv")) %>% 
  mutate(donor_id = as.factor(donor_id))

translocation_points <- st_as_sf(translocation_points, coords = c("utme_noise", "utmn_noise"), crs = st_crs(26911))

yose_boundary <- st_read(here::here(
  "data", "maps", "nps-boundaries", "yose_boundary.shp"))
st_crs(yose_boundary) # determine coordinate reference system (CRS)
yose_boundary <- st_transform(yose_boundary, 26911) # transform to NAD83 UTM11

# California Color Hillshade (90m & 300m) from koordinates.com
hillshade_90m <- read_stars(here::here(
  "data", "maps", "hillshade-90m", "california-color-hillshade-90m.tif"))
st_crs(hillshade_90m)

hillshade_300m <- read_stars(here::here(
  "data", "maps", "hillshade-300m", "california-color-hillshade-300m.tif"))
```

### Check & fix shapefile polygons

```{r}
st_is_valid(yose_boundary) # invalid polygon

yose_boundary <- st_make_valid(yose_boundary$geometry)

st_is_valid(yose_boundary) # confirm that polygon is valid
```

### Crop raster with bounding box

```{r}
# For printing on screen: xmin = 244000, ymax = 4242500, xmax = 309000, ymin = 4142000
bbox <- st_bbox(c(xmin = 245000, ymax = 4231000, xmax = 311000, ymin = 4151000), 
                crs = st_crs(yose_boundary)) %>%  
  st_as_sfc()
hillshade_yose_crop <- st_crop(hillshade_90m, bbox)
hillshade_yose_crop <- st_transform(hillshade_yose_crop, 26911)
```

### Create study area map

```{r}
#translocation_points <- translocation_points %>% 
# mutate(
#    label = case_when(
#      site_id == 70567 ~ 4, 
#      site_id == 72996 ~ 1
#    ))

translocation_points_map <- tm_shape(hillshade_yose_crop) + 
  tm_rgb(r = 1, g = 2, b = 3) +
  tm_shape(yose_boundary) + 
  tm_borders(col = "#737373", lwd = 2) +
  tm_shape(translocation_points) + 
  tm_symbols(size = 4, 
             shape = "donor_id",
             col = "type", 
             legend.shape.show = FALSE, 
             palette = c("#87CEFA", "#C0FF3E"), # tmap only recognizes basic color names (e.g., "blue" but not "lightblue") - use HEX instead
             title.col = "Population type") +
  tm_layout(legend.position = c("right", "top"),
            legend.bg.color = "white",
            legend.title.size = 1.5,
            legend.text.size = 1.2) +
  tm_text(text = "site_id",
          auto.placement = TRUE,
          size = 1.1) +
  tm_compass(type = "4star",
             position = c(0.80, 0.11),
             size = 5) +
  tm_scale_bar(breaks = c(0, 10, 20), 
               text.size = 1.2, 
               position = c("right", "bottom"))

translocation_points_map
```

### Create inset map of California

```{r}
inset_map <- tm_shape(hillshade_300m) +
  tm_rgb(r = 1, g = 2, b = 3) +
  tm_shape(yose_boundary) +
  tm_borders(col = "black")
inset_map
```

### Study area map with inset map

```{r}
translocation_points_map
print(inset_map, vp = viewport(0.34, 0.20, width = 0.2, height = 0.2))
```

### Save map

```{r}
tmap_save(translocation_points_map, 
          insets_tm = inset_map,
          insets_vp = viewport(0.17, 0.15, width = 0.25, height = 0.25),
          here::here("doc", "manuscript", "figures", "map_translocation_points.png"))
```
